name: Set cargo dependency version
description: |
  Sets cargo dependency version in projects root Cargo.toml manifest.

inputs:
  package:
    description: "Dependency name"
    required: true
  version:
    description: "Dependency version"
    required: true

runs:
  using: composite

  steps:
    - name: Setup dasel
      uses: allejo/setup-dasel@v1

    - name: Print ${{ inputs.package }} version
      shell: bash
      id: version
      run: |
        # Print ${{ inputs.package }} version
        echo '${{ inputs.version }}' | dasel -p json --color
        echo "::set-output name=json::$(echo '${{ inputs.version }}' | dasel -p json -c)"

    - name: Set ${{ inputs.package }} version
      shell: bash
      run: |
        # Set ${{ inputs.package }} version
        version=$(echo '${{ steps.version.outputs.json }}' | dasel -p json -w toml)
        ${{ github.action_path }}/set-version.sh ${{ inputs.package }} "${version}"

    - name: Update Cargo.lock
      shell: bash
      env:
        CARGO_UNSTABLE_SPARSE_REGISTRY: true
      run: cargo update -p ${{ inputs.package }}

    - name: Fail if more than one source found
      shell: bash
      run: |
        # Fail if more than one source found
        LOCK_SOURCE="$(dasel -f Cargo.lock -p toml 'package.(name=${{ inputs.package }}).source' -m)"
        echo "$LOCK_SOURCE"
        if (( $(echo "$LOCK_SOURCE" | wc -l) > 1 )); then
          cat <<-ERROR
        More than one source found.
        ERROR
          exit 1
        fi

    - name: Parse Cargo.lock and prepare variables
      shell: bash
      run: |
        # Parce Cargo.lock and prepare variables
        echo "LOCK_SOURCE=$(dasel -f Cargo.lock -p toml 'package.(name=${{ inputs.package }}).source' -m)" >> $GITHUB_ENV
        echo "LOCK_VERSION=$(dasel -f Cargo.lock -p toml 'package.(name=${{ inputs.package }}).version' -m)" >> $GITHUB_ENV
        echo "VERSION=$(echo '${{ steps.version.outputs.json }}' | dasel -p json -w plain '.version' 2>/dev/null)" >> $GITHUB_ENV
        echo "GIT=$(echo '${{ steps.version.outputs.json }}' | dasel -p json -w plain '.git' 2>/dev/null)" >> $GITHUB_ENV

    - name: Check that ${{ inputs.package }} source found in Cargo.lock matches input
      shell: bash
      run: |
        # Check that ${{ inputs.package }} source found in Cargo.lock matches input
        ${{ github.action_path }}/check-version.sh
