name: Set cargo dependency version
description: |
  Sets cargo dependency version in projects root Cargo.toml manifest.

inputs:
  package:
    description: "Dependency name"
    required: true
  version:
    description: "Dependency version"
    required: true

runs:
  using: composite

  steps:
    - name: Setup dasel
      uses: allejo/setup-dasel@v1

    - name: Print ${{ inputs.package }} version
      shell: bash
      id: version
      run: |
        # Print ${{ inputs.package }} version
        echo '${{ inputs.version }}' | dasel -p json --color
        echo "::set-output name=json::$(dasel -p json -c)"

    - name: Set ${{ inputs.package }} version
      shell: bash
      run: |
        # Set ${{ inputs.package }} version
        version=$(echo '${{ steps.version.outputs.json }}' | dasel -p json --format '{ {{ $first := true }}{{ range $k, $v := . }}{{ if $first }}{{ $first = false }}{{ else }}, {{ end }}{{ $k }} = "{{ $v }}"{{ end }} }')

        sed -i "s#${{ inputs.package }} = .*#${{ inputs.package }} = \\${version}#g" Cargo.toml

    - name: Update Cargo.lock
      shell: bash
      env:
        CARGO_UNSTABLE_SPARSE_REGISTRY: true
      run: cargo update -p ${{ inputs.package }}

    - name: Fail if more than one source found
      shell: bash
      run: |
        # Fail if more than one source found
        # get all dependency sources
        SOURCES=$(dasel -f Cargo.lock -p toml "package.(name=${{ inputs.package }}).source" -m)
        echo $SOURCES
        if (( $(echo $SOURCES | wc -l) > 1 )); then
          cat <<-ERROR
          More than one source found.
          ${{ inputs.package }} should be set in root Cargo.toml file for all
          workspace members with "workspace.dependency".
        ERROR
          exit 1
        fi

    - name: Check that ${{ inputs.package }} source found in Cargo.lock matches input
      shell: bash
      run: |
        # Check that ${{ inputs.package }} source found in Cargo.lock matches input
        SOURCE=$(dasel -f Cargo.lock -p toml "package.(name=${{ inputs.package }}).source" -m)
        LOCK_VERSION=$(dasel -f Cargo.lock -p toml "package.(name=${{ inputs.package }}).version" -m)
        INPUT=$(echo '${{ steps.version.outputs.json }}' | dasel -p json -m -w plain '.[*]')
        # if version set check version field
        if version=$(echo '${{ steps.version.outputs.json }}' | dasel -p json -c -w plain '.version'); then
          if [[ $version != $LOCK_VERSION  ]]; then
            echo "$version doesn't match source $LOCK_VERSION"
            exit 1
          fi
        # else check that each value of version input json is found in dependency source
        else
          # flatten values from provided json
          INPUT=$(echo '${{ steps.version.outputs.json }}' | dasel -p json -m -w plain '.[*]')
          for param in $INPUT; do
            if ! [[ $SOURCE =~ $param ]]; then
              echo "$param not found in $SOURCE"
              exit 1
            fi
          done
        done
