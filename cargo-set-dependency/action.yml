name: Set dependencies version in cargo project
description: |
  Sets dependencies version in Cargo.toml

inputs:
  dependencies:
    description: "Map of dependencies to set in Cargo.toml"
    required: true
  manifest:
    description: "Path to root Cargo.toml"
    required: false
    default: "Cargo.toml"

runs:
  using: composite

  steps:
    - name: Print dependencies
      shell: bash
      run: |
        # Print dependencies
        echo '${{ inputs.dependencies }}' | jq -C
        echo '${{ inputs.dependencies }}' | jq -c > input.json

    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    - name: Install python dependencies
      shell: bash
      run: |
        # Install python dependencies
        python -m pip install -r ${{ github.action_path }}/requirements.txt

    - name: Override dependencies
      shell: bash
      run: |
        # Override dependencies
        python ${{ github.action_path }}/cargo-set-dependency.py

    - name: Update Cargo.lock
      shell: bash
      env:
        CARGO_UNSTABLE_SPARSE_REGISTRY: true
      run: |
        # Update Cargo.lock
        packages=$(cat input.json | jq -rc '.[].package |= "-p " + . | .[].package')
        cargo update --manifest-path ${{ inputs.manifest }} ${packages}

    - name: Setup dasel
      uses: allejo/setup-dasel@v1
      with:
        version: 1.27.3

    - name: Check that dependency is set in Cargo.lock
      shell: bash
      run: |
        # Chech that dependency is set in Cargo.lock
        exit=0
        while read -r package version; do
          version_lock="$(dasel -f Cargo.lock -p toml -m --plain "package.(name=${package}).version")"
          if ! [[ ${version} =~ ${version_lock} ]]; then
        cat <<ERROR
        ${package} override unsuccessful.
        ${version_lock} in Cargo.lock is not the same as input version ${version}
        ERROR
          exit=1
          fi
        done < <(cat input.json | jq -rc '.[] | .package + " " + .version')
        exit ${exit}

    - name: Print results to check summary
      shell: bash
      run: |
        # Print result to check summary
        cat <<TABLE >> $GITHUB_STEP_SUMMARY
        ## Used versions
        | name | version |
        | ---- | ------- |
        TABLE
        while read -r package; do
        cat <<VERSIONS >> $GITHUB_STEP_SUMMARY
        | ${package} | $(dasel -f Cargo.lock -p toml "package.(name=${package}).version" -m)
        VERSIONS
        done < <(cat input.json | jq -rc '.[].package')
