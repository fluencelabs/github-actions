/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.12.3
 *
 */

import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client';
    


// Services



export function registerOpString(...args) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "op",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "concat_strings" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "a" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "b" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "c" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "d" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "e" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "f" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "identity" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "s" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export const checkPeer_script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "targetPeer") [] -targetPeer-arg-)
                         )
                         (call %init_peer_id% ("getDataSrv" "validatorPeer") [] -validatorPeer-arg-)
                        )
                        (call %init_peer_id% ("getDataSrv" "timeout") [] -timeout-arg-)
                       )
                       (new $reachability
                        (new $validatorStatus
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (par
                                 (xor
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (new $-ephemeral-stream-
                                       (new #-ephemeral-canon-
                                        (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                       )
                                      )
                                      (call -validatorPeer-arg- ("op" "identity") ["VALIDATOR REACHABLE"] ret)
                                     )
                                     (ap ret $validatorStatus)
                                    )
                                    (new $-ephemeral-stream-
                                     (new #-ephemeral-canon-
                                      (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                     )
                                    )
                                   )
                                   (new $-ephemeral-stream-
                                    (new #-ephemeral-canon-
                                     (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                                    )
                                   )
                                  )
                                  (seq
                                   (seq
                                    (new $-ephemeral-stream-
                                     (new #-ephemeral-canon-
                                      (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                     )
                                    )
                                    (new $-ephemeral-stream-
                                     (new #-ephemeral-canon-
                                      (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                                     )
                                    )
                                   )
                                   (fail :error:)
                                  )
                                 )
                                 (seq
                                  (call %init_peer_id% ("peer" "timeout") [-timeout-arg- "VALIDATOR NOT REACHABLE"] ret-0)
                                  (ap ret-0 $validatorStatus)
                                 )
                                )
                                (new $validatorStatus_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [0 1] validatorStatus_incr)
                                    (fold $validatorStatus validatorStatus_fold_var
                                     (seq
                                      (seq
                                       (ap validatorStatus_fold_var $validatorStatus_test)
                                       (canon %init_peer_id% $validatorStatus_test  #validatorStatus_iter_canon)
                                      )
                                      (xor
                                       (match #validatorStatus_iter_canon.length validatorStatus_incr
                                        (null)
                                       )
                                       (next validatorStatus_fold_var)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $validatorStatus_test  #validatorStatus_result_canon)
                                  )
                                  (ap #validatorStatus_result_canon validatorStatus_gate)
                                 )
                                )
                               )
                               (canon %init_peer_id% $validatorStatus  #validatorStatus_canon)
                              )
                              (call %init_peer_id% ("op" "identity") [#validatorStatus_canon] ret-1)
                             )
                             (new -if-else-error-
                              (new -else-error-
                               (new -if-error-
                                (xor
                                 (match ret-1.$.[0] "VALIDATOR REACHABLE"
                                  (new $targetStatus
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (par
                                        (xor
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (new $-ephemeral-stream-
                                                (new #-ephemeral-canon-
                                                 (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                                )
                                               )
                                               (new $-ephemeral-stream-
                                                (new #-ephemeral-canon-
                                                 (canon -validatorPeer-arg- $-ephemeral-stream-  #-ephemeral-canon-)
                                                )
                                               )
                                              )
                                              (call -targetPeer-arg- ("op" "identity") ["TARGET REACHABLE"] ret-2)
                                             )
                                             (ap ret-2 $targetStatus)
                                            )
                                            (new $-ephemeral-stream-
                                             (new #-ephemeral-canon-
                                              (canon -validatorPeer-arg- $-ephemeral-stream-  #-ephemeral-canon-)
                                             )
                                            )
                                           )
                                           (new $-ephemeral-stream-
                                            (new #-ephemeral-canon-
                                             (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                            )
                                           )
                                          )
                                          (new $-ephemeral-stream-
                                           (new #-ephemeral-canon-
                                            (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                                           )
                                          )
                                         )
                                         (seq
                                          (seq
                                           (seq
                                            (new $-ephemeral-stream-
                                             (new #-ephemeral-canon-
                                              (canon -validatorPeer-arg- $-ephemeral-stream-  #-ephemeral-canon-)
                                             )
                                            )
                                            (new $-ephemeral-stream-
                                             (new #-ephemeral-canon-
                                              (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                             )
                                            )
                                           )
                                           (new $-ephemeral-stream-
                                            (new #-ephemeral-canon-
                                             (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                                            )
                                           )
                                          )
                                          (fail :error:)
                                         )
                                        )
                                        (seq
                                         (call %init_peer_id% ("peer" "timeout") [-timeout-arg- "TARGET NOT REACHABLE"] ret-3)
                                         (ap ret-3 $targetStatus)
                                        )
                                       )
                                       (new $targetStatus_test
                                        (seq
                                         (seq
                                          (seq
                                           (call %init_peer_id% ("math" "add") [0 1] targetStatus_incr)
                                           (fold $targetStatus targetStatus_fold_var
                                            (seq
                                             (seq
                                              (ap targetStatus_fold_var $targetStatus_test)
                                              (canon %init_peer_id% $targetStatus_test  #targetStatus_iter_canon)
                                             )
                                             (xor
                                              (match #targetStatus_iter_canon.length targetStatus_incr
                                               (null)
                                              )
                                              (next targetStatus_fold_var)
                                             )
                                            )
                                            (never)
                                           )
                                          )
                                          (canon %init_peer_id% $targetStatus_test  #targetStatus_result_canon)
                                         )
                                         (ap #targetStatus_result_canon targetStatus_gate)
                                        )
                                       )
                                      )
                                      (new $targetStatus_test-0
                                       (seq
                                        (seq
                                         (seq
                                          (call %init_peer_id% ("math" "add") [0 1] targetStatus_incr-0)
                                          (fold $targetStatus targetStatus_fold_var-0
                                           (seq
                                            (seq
                                             (ap targetStatus_fold_var-0 $targetStatus_test-0)
                                             (canon %init_peer_id% $targetStatus_test-0  #targetStatus_iter_canon-0)
                                            )
                                            (xor
                                             (match #targetStatus_iter_canon-0.length targetStatus_incr-0
                                              (null)
                                             )
                                             (next targetStatus_fold_var-0)
                                            )
                                           )
                                           (never)
                                          )
                                         )
                                         (canon %init_peer_id% $targetStatus_test-0  #targetStatus_result_canon-0)
                                        )
                                        (ap #targetStatus_result_canon-0 targetStatus_gate-0)
                                       )
                                      )
                                     )
                                     (call %init_peer_id% ("op" "concat_strings") ["target " -targetPeer-arg- " validator " -validatorPeer-arg- " status " targetStatus_gate-0.$.[0]] ret-4)
                                    )
                                    (ap ret-4 $reachability)
                                   )
                                  )
                                 )
                                 (seq
                                  (ap :error: -if-error-)
                                  (xor
                                   (match :error:.$.error_code 10001
                                    (seq
                                     (call %init_peer_id% ("op" "concat_strings") ["validator " -validatorPeer-arg- " relay " -relay- " status " "VALIDATOR NOT REACHABLE"] ret-5)
                                     (ap ret-5 $reachability)
                                    )
                                   )
                                   (seq
                                    (seq
                                     (ap :error: -else-error-)
                                     (xor
                                      (match :error:.$.error_code 10001
                                       (ap -if-error- -if-else-error-)
                                      )
                                      (ap -else-error- -if-else-error-)
                                     )
                                    )
                                    (fail -if-else-error-)
                                   )
                                  )
                                 )
                                )
                               )
                              )
                             )
                            )
                            (new $reachability_test
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("math" "add") [0 1] reachability_incr)
                                (fold $reachability reachability_fold_var
                                 (seq
                                  (seq
                                   (ap reachability_fold_var $reachability_test)
                                   (canon %init_peer_id% $reachability_test  #reachability_iter_canon)
                                  )
                                  (xor
                                   (match #reachability_iter_canon.length reachability_incr
                                    (null)
                                   )
                                   (next reachability_fold_var)
                                  )
                                 )
                                 (never)
                                )
                               )
                               (canon %init_peer_id% $reachability_test  #reachability_result_canon)
                              )
                              (ap #reachability_result_canon reachability_gate)
                             )
                            )
                           )
                           (canon %init_peer_id% $reachability  #-reachability-fix-0)
                          )
                          (ap #-reachability-fix-0 -reachability-flat-0)
                         )
                        )
                       )
                      )
                      (call %init_peer_id% ("callbackSrv" "response") [-reachability-flat-0])
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [:error: 0])
                    )
    `

export function checkPeer(...args) {


    return callFunction$$(
        args,
        {
    "functionName" : "checkPeer",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "targetPeer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "validatorPeer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "timeout" : {
                    "tag" : "scalar",
                    "name" : "u32"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        checkPeer_script
    )
}

/* eslint-enable */