import "@fluencelabs/aqua-lib/builtin.aqua"

service OpString("op"):
    concat_strings(a: string, b: string, c: string, d: string, e: string, f: string) -> string
    identity(s: string) -> string

func checkPeer(targetPeer: PeerId, validatorPeer: PeerId, timeout: u32) -> []string:
    reachability: *string
    validatorStatus: *string
    -- check that 'validatorPeer' is reachable from our relay
    on validatorPeer:
        validatorStatus <- OpString.identity("VALIDATOR REACHABLE")
    par validatorStatus <- Peer.timeout(timeout, "VALIDATOR NOT REACHABLE")

    join validatorStatus[0] -- wait for either validator being reached, or timeout to happen

    -- save validator status to variable to avoid matching on a stream
    st <- Op.identity(validatorStatus)
    if st! == "VALIDATOR REACHABLE":
        -- check that 'target' is reachable from 'validatorPeer'
        targetStatus: *string
        on targetPeer via validatorPeer:
            targetStatus <- OpString.identity("TARGET REACHABLE")
        par targetStatus <- Peer.timeout(timeout, "TARGET NOT REACHABLE")

        join targetStatus[0] -- wait for target to be reachable, or timeout to happen
        reachability <<- OpString.concat_strings("target ", targetPeer, " validator ", validatorPeer, " status ", targetStatus[0])
    else:
        -- if validator isn't reachable, report that
        reachability <<- OpString.concat_strings("validator ", validatorPeer, " relay ", HOST_PEER_ID, " status ", "VALIDATOR NOT REACHABLE")

    -- Wait for all validations to finish
    join reachability[0]

    <- reachability
